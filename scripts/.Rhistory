library(reticulate)
library(threshr)
library(knitr)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
np <- import("numpy")
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
np <- import("numpy")
library(knitr)
library(threshr)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
np <- import("numpy")
var <- 'wind_data'
block_size <- 'daily'
if(var=='precip_data'){
min_quantile <- .9  # very skewed because of near-zero observations
}else{
min_quantile <- .6
}
X <- np$load(paste0("/Users/alison/Documents/DPhil/multivariate/", var, "/", block_size, "/train/images.npy"))
M <- dim(X)[2]
N <- dim(X)[3]
u_mat <- matrix(nrow=M, ncol=N)  # matrix of threshold values
n.excesses <- matrix(nrow=M, ncol=N)
for(i in 1:M){
for(j in 1:N){
x <- X[, i, j, 1]
if(var(x) > 0){
print(paste0("i: ", i))
print(paste0("j: ", j))
npy <- 365 # observations for every day of the year
attr(x, 'npy') <- npy
# restrict search so that number of excesses always >= 10
max.allowed <- sort(x)[(length(x) - 50)]
max.quantile <- ecdf(x)(max.allowed)
q_vec <- seq(min_quantile, max.quantile, by=0.01)
u_vec <- quantile(x, p=q_vec)
#     suppressWarnings({
#       var_cv <- ithresh(x, u_vec=u_vec, trans='BC')
#     })
var_cv <- ithresh(x, u_vec=u_vec, trans='BC')
best_u <- getmode(summary(var_cv)[, "best u"])
best_u <- max(x[x <= best_u]) # use an actual observation as threshold, important for interpolating
print(paste0('Best u: ', best_u))
u_mat[i, j] <- best_u
n.excesses[i, j] <- length(x[x > best_u])
}else{
u_mat[i, j] <- x[1]
}
}
}
block_size <- 'weekly'
if(var=='precip_data'){
min_quantile <- .9  # very skewed because of near-zero observations
}else{
min_quantile <- .6
}
X <- np$load(paste0("/Users/alison/Documents/DPhil/multivariate/", var, "/", block_size, "/train/images.npy"))
M <- dim(X)[2]
N <- dim(X)[3]
u_mat <- matrix(nrow=M, ncol=N)  # matrix of threshold values
n.excesses <- matrix(nrow=M, ncol=N)
for(i in 1:M){
for(j in 1:N){
x <- X[, i, j, 1]
if(var(x) > 0){
print(paste0("i: ", i))
print(paste0("j: ", j))
npy <- 365 # observations for every day of the year
attr(x, 'npy') <- npy
# restrict search so that number of excesses always >= 10
max.allowed <- sort(x)[(length(x) - 50)]
max.quantile <- ecdf(x)(max.allowed)
q_vec <- seq(min_quantile, max.quantile, by=0.01)
u_vec <- quantile(x, p=q_vec)
#     suppressWarnings({
#       var_cv <- ithresh(x, u_vec=u_vec, trans='BC')
#     })
var_cv <- ithresh(x, u_vec=u_vec, trans='BC')
best_u <- getmode(summary(var_cv)[, "best u"])
best_u <- max(x[x <= best_u]) # use an actual observation as threshold, important for interpolating
print(paste0('Best u: ', best_u))
u_mat[i, j] <- best_u
n.excesses[i, j] <- length(x[x > best_u])
}else{
u_mat[i, j] <- x[1]
}
}
}
block_size <- 'weekly'
if(var=='precip_data'){
min_quantile <- .9  # very skewed because of near-zero observations
}else{
min_quantile <- .6
}
if(block_size=='daily'){
nexcesses <- 50
}elif(block_size=='weekly'){
if(block_size=='daily'){
nexcesses <- 50
}elseif(block_size=='weekly'){
if(block_size=='daily'){
nexcesses <- 50
}elif(block_size=='weekly'){
if(block_size=='daily'){
nexcesses <- 50
}else if(block_size=='weekly'){
nexcesses <- 30
}
X <- np$load(paste0("/Users/alison/Documents/DPhil/multivariate/", var, "/", block_size, "/train/images.npy"))
M <- dim(X)[2]
N <- dim(X)[3]
u_mat <- matrix(nrow=M, ncol=N)  # matrix of threshold values
n.excesses <- matrix(nrow=M, ncol=N)
for(i in 1:M){
for(j in 1:N){
x <- X[, i, j, 1]
if(var(x) > 0){
print(paste0("i: ", i))
print(paste0("j: ", j))
npy <- 365 # observations for every day of the year
attr(x, 'npy') <- npy
# restrict search so that number of excesses always >= 10
max.allowed <- sort(x)[(length(x) - nexcesses)]
max.quantile <- ecdf(x)(max.allowed)
q_vec <- seq(min_quantile, max.quantile, by=0.01)
u_vec <- quantile(x, p=q_vec)
#     suppressWarnings({
#       var_cv <- ithresh(x, u_vec=u_vec, trans='BC')
#     })
var_cv <- ithresh(x, u_vec=u_vec, trans='BC')
best_u <- getmode(summary(var_cv)[, "best u"])
best_u <- max(x[x <= best_u]) # use an actual observation as threshold, important for interpolating
print(paste0('Best u: ', best_u))
u_mat[i, j] <- best_u
n.excesses[i, j] <- length(x[x > best_u])
}else{
u_mat[i, j] <- x[1]
}
}
}
u_mat
imshow
heatmap
heatmap(u_mat)
dim(u_mat)
np$save(paste0("/Users/alison/Documents/DPhil/multivariate/", var, "/", block_size, "/train/pot/thresholds.npy"), u_mat)
paste0("/Users/alison/Documents/DPhil/multivariate/", var, "/", block_size, "/train/pot/thresholds.npy")
np$save(paste0("/Users/alison/Documents/DPhil/multivariate/", var, "/", block_size, "/train/pot/thresholds.npy"), u_mat)
X
dim(X)
block_size <- 'monthly'
if(var=='precip_data'){
min_quantile <- .9  # very skewed because of near-zero observations
}else{
min_quantile <- .6
}
if(block_size=='daily'){
nexcesses <- 50
}else if(block_size=='weekly'){
nexcesses <- 30
}
X <- np$load(paste0("/Users/alison/Documents/DPhil/multivariate/", var, "/", block_size, "/train/images.npy"))
M <- dim(X)[2]
N <- dim(X)[3]
u_mat <- matrix(nrow=M, ncol=N)  # matrix of threshold values
n.excesses <- matrix(nrow=M, ncol=N)
for(i in 1:M){
for(j in 1:N){
x <- X[, i, j, 1]
if(var(x) > 0){
print(paste0("i: ", i))
print(paste0("j: ", j))
npy <- 365 # observations for every day of the year
attr(x, 'npy') <- npy
# restrict search so that number of excesses always >= 10
max.allowed <- sort(x)[(length(x) - nexcesses)]
max.quantile <- ecdf(x)(max.allowed)
q_vec <- seq(min_quantile, max.quantile, by=0.01)
u_vec <- quantile(x, p=q_vec)
#     suppressWarnings({
#       var_cv <- ithresh(x, u_vec=u_vec, trans='BC')
#     })
var_cv <- ithresh(x, u_vec=u_vec, trans='BC')
best_u <- getmode(summary(var_cv)[, "best u"])
best_u <- max(x[x <= best_u]) # use an actual observation as threshold, important for interpolating
print(paste0('Best u: ', best_u))
u_mat[i, j] <- best_u
n.excesses[i, j] <- length(x[x > best_u])
}else{
u_mat[i, j] <- x[1]
}
}
}
np$save(paste0("/Users/alison/Documents/DPhil/multivariate/", var, "/", block_size, "/train/pot/thresholds.npy"), u_mat)
